The Unicomplex Protocol
-----------------------

1 Introduction
--------------

Before we  come to dry,  technical diagrams,  this first section  shall show
briefly what the  point of the Unicomplex  Protocol (hereinafter abbreviated
as UP) is.

There are three  parties involved in the network  communication taking place
under the keyword `unicomplex':

 - master, slaves and clients.

The `master' functions  as the outward appearance of  a computer collective.
It transparently connects the both other parties: slaves and clients       .

For slaves, it works  like a hub: it is the central  point where all results
are regularly reported to.

For clients,  it represents a computer  collective (the set of  a master and
associated slaves  which carry out  computations): the master  is externally
known and fixed. It is addressed by  clients who want to enter a computation
job and query its results.

`Slaves' live behind  the master. It is  inherent to the UP  that slaves are
not fixed, i.e. running slaves can go offline and new slaves can come up and
register to take  over jobs. And this  is their principal duty:  to take job
definitions from the master and then  calculate. They will report results in
regular time intervals  (or immediately when they are known)  to the master.
Only the  master is  `trusted' in  their eyes. They  will not  interpret any
traffic from other hosts.

Finally `clients' are the most elastic term. They are programs which use the
UP to communicate job definitions to the master and receive results.

There is a  further non-technical distinction between  `voluntary' and `non-
voluntary'  clients. A  voluntary client  reports  its results  back to  the
master as if it had worked as  a slave. A non-voluntary client only consumes
data from the collective.

2 Important terms and abbreviations
-----------------------------------

Terms used in the explanation of other terms in this list are suffixed by an
asterisk.

 - `UP':
the Unicomplex Protocol whose definition this is.

 - `Master':
a central, public server (host or program) implementing the UP*

 - `Slave':
an auxiliary computer (or program) connected to a master*

 - `Collective':
the set of a master* and its associated slaves*

 - `Job':
a  formal definition  of some  task for  the collective*  to compute.  It is
formulated in the P language.

 - `Client':
a host (or program) which sends jobs* to a collective's* master*

3 The UP in detail
------------------

The UP  is based on TCP/IP  to guarantee that communication  goes by without
losing any packet accidentally. Moreover, from the semantics outlined in the
first section, it makes sense to  establish a connection between hosts. As a
final justification,  the IP is  used to potentially connect  computers from
all over the world.

A UP packet is made of the following fields (always in network byte order):

[ Magic Number 0x55432d50 = "UC-P" |   4 B ]
[ Type T                           |   4 B ]
[ Sender ID                        |   4 B ]
[ Signature                        | 256 B ]
[ Length L                         |   4 B ]
[ Reserved                         |   4 B ]
[ Body B                           |   L B ]
--------------------------------------------
                                 276 + L B

The Magic Number 0x55432d50 is constant and required so that a UP-conforming
program recognises the packet.

The Reserved field must be initialised to zeroes for future compatibility.

3.1 Signature verification
--------------------------

Each  packet arriving  at any  party must  be examined  with respect  to the
Sender ID and Signature fields. They verify the sender's identity.

3.1.1 Signing a packet
----------------------

To sign  a packet, it must  first be constructed completely,  except for the
Signature field. The Sender ID is  a unique number which identifies a person
to the receiver. A natural method to  organise Sender IDs is outlined in the
next section.

When the  packet is constructed, the  Signature field is initialised  to all
zeroes  and the  SHA-1 message  digest of  the packet  is taken.  This hash,
signed with  the RSA 2048  bits private key of  the sender is  the Signature
field.

3.1.2 Verifying a packet
------------------------

We first  observe that the  master has the  most difficult job  in verifying
their correspondents'  identities. Slaves  only communicate with  the public
master, just  as clients  do. It  is necessary  that the  public key  of the
master is known to the clients and slaves.

The master now has to keep a database of `trusted' hosts. In there, a unique
Sender ID is associated with this person's public RSA key. In packets coming
from the master, the Sender ID field will contain 0 and this value is not to
be assigned to any other host by the database.

When a packet  arrives, the public key corresponding to  the given Sender ID
is searched in the database. If it is not found, the packet is rejected with
an error type packet (see next section).

If  the public  key  is found,  the  packet is  validated  according to  the
signing procedure  (described in  the previous  section). Should  the packet
verification fail, the master responds with an error message. Otherwise, the
packet is authentic and processed further.

It is also possible  that the Sender ID and Signature  field are all zeroes.
This may only  come from a client  and makes it an  `untrusted' client. Jobs
are accepted but results rejected. In  other words, only trusted clients can
at all be voluntary.

3.2 The Type field
------------------

There  remain only  the  Type,  Length and  Body  fields  which are  closely
related. The set of valid possibilities are subject of this section.

The illustration is presented in form of three finite automata, one for each
of master,  slave and client. Note  that unused bytes in  valid requests are
really filled with spaces (ASCII 0x20).

3.2.1 Finite automate master
----------------------------

There  are only  two  states  of the  master  interesting  to this  protocol
definition: `serving'  and `sleeping' (a  third would be `offline'  and does
not need  to be specified  in a protocol).  However, the amount  of possible
inputs and outputs is great.

Note that the treatment of a packet which is not element of the input set of
a state is implementation-defined. This  allows for custom extensions to the
protocol. Otherwise, the packet is most likely silently ignored.

The following  table lists the data  and state transitions briefly  (a tilde
denotes that the state remains unchanged):

+----------+--------+--------+------------+
|   State  |  Input | Output | Next State |
+----------+--------+--------+------------+
| Serving  | "MOTD" | "AMOD" | ~          |
|          +--------+--------+            |
|          | "PJOB" | "ATRU" |            |
|          |        | "AUTR" |            |
|          |        | "PJOB" |            |
|          |        | "EP  " |            |
|          |        | "ESLV" |            |
|          |        | "ESPC" |            |
|          +--------+--------+            |
|          | "RES " | "A   " |            |
|          |        | "RES " |            |
|          |        | "ESPC" |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | "SLAV" | "A   " |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | "GONE" | "A   " |            |
|          |        | "ENR " |            |
|          +--------+--------+            |
|          | "FIN " | "A   " |            |
|          |        | "FIN " |            |
|          +--------+--------+            |
|          | "QRY " | "RES " |            |
|          |        | "EUTR" |            |
|          |        | "ENR " |            |
|          +--------+--------+            |
|          | "ICLI" | "AICL" |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | "ISLV" | "AISL" |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | "ICOL" | "AICO" |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | "IMP " | "A   " |            |
|          |        | "EUTR" |            |
|          +--------+--------+            |
|          | +      | "RES " |            |
|          |        | 0      |            |
|          +--------+--------+------------+
|          | !      | "HALT" | 0          |
|          |        | "GONE" |            |
|          +--------+--------+------------+
|          | *      | "SLP " | Sleeping   |
+----------+--------+--------+------------+
| Sleeping | !      | "HALT" | 0          |
|          |        | "GONE" |            |
|          +--------+--------+------------+
|          | #      | "WAKE" | Serving    |
+----------+--------+--------+------------+

<-- Errors as inputs?

Two possible  additional outputs to every  input are the packets  "ESIG" and
"ECHK" which  are sent when the  signature was unknown or  the signature was
known but the checksum is bad.

The  * and  # inputs  are special  ones not  subject to  this protocol.  The
`Sleeping' state  is therefore  not required to  be implemented.  These both
inputs and the  `Sleeping' state are mentioned here  nevertheless because it
is  a  concern  of security  to  let  the  person  who operates  the  master
decide to  temporarily put  it to  sleep. It is  recommended to  implement a
UNIX  socket  interface for  these  two  inputs.  The  output is  also  left
implementation-defined.

The + input is a timer-based implementation-defined input. This is also only
advised  by the  protocol to  try to  balance network  traffic overhead  and
waiting time. The  idea is to wait  for a fixed time,  buffering all results
from slaves. When the periodic + input arrives, the relevant data is sent in
one "RES "  packet to the client. It  is also possible that no  packet is at
all sent which is denoted by the 0 symbol.

3.2.2 Finite automate slave
---------------------------

+-----------------+--------+--------+-----------------+
|      State      |  Input | Output |    Next State   |
+-----------------+--------+--------+-----------------+
| Idle            | "PJOB" | "A   " | Serving         |
|                 |        +--------+-----------------+
|                 |        | "ESPC" | ~               |
|                 +--------+--------+-----------------+
|                 | "SLP " | "A   " | IdleSleeping    |
|                 +--------+--------+                 |
|                 | *      |        |                 |
|                 +--------+--------+-----------------+
|                 | !      | "GONE" | 0               |
+-----------------+--------+--------+-----------------+
| Serving         | "HALT" | "A   " | Idle            |
|                 +--------+--------+-----------------+
|                 | "ENR " | "IMP " | Idle            |
|                 +--------+--------+-----------------+
|                 | +      | "RES " | ~               |
|                 |        | 0      |                 |
|                 +--------+--------+-----------------+
|                 | "SLP " | "A   " | ServingSleeping |
|                 +--------+--------+                 |
|                 | *      |        |                 |
|                 +--------+--------+-----------------+
|                 | !      | "GONE" | 0               |
|                 +--------+--------+-----------------+
|                 | ^      | "FIN " | Idle            |
+-----------------+--------+--------+-----------------+
| ServingSleeping | "WAKE" | "A   " | Serving         |
|                 +--------+--------+                 |
|                 | #      |        |                 |
|                 +--------+--------+-----------------+
|                 | !      | "GONE" | 0               |
+-----------------+--------+--------+-----------------+
| IdleSleeping    | "PJOB" | "ESLP" | ~               |
|                 +--------+--------+-----------------+
|                 | "WAKE" | "A   " | Idle            |
|                 +--------+--------+                 |
|                 | #      |        |                 |
|                 +--------+--------+-----------------+
|                 | !      | "GONE" | 0               |
+-----------------+--------+--------+-----------------+

<-- Errors as inputs?

Before  de-registering itself  and going  offline,  it is  considered to  be
polite of the  slave to commit all  accumulated results to the  master or at
least buffer them persistently to send them back the next time.

When the TCP connection  between a slave and a master  breaks, this event is
equivalent to a "G " packet from the slave.

3.2.3 Finite automate client
----------------------------

+--------+--------+--------+------------+
|  State |  Input | Output | Next State |
+--------+--------+--------+------------+
| Client | $      | "PJOB" | ~          |
|        +--------+--------+            |
|        | "GONE" | 0      |            |
|        | "IMP " |        |            |
|        | "FIN " |        |            |
|        +--------+--------+            |
|        | "RES " | 0      |            |
+--------+--------+--------+------------+

Listed  are  only packets  considered  especially  crucial to  the  client's
execution flow.  There are several other  inputs which is mainly  data to be
presented to the user  which was asking for it in the  first place (like the
ICLI -> AICL,  etc.) packets. Generally, the client's  implementation is not
important to this  protocol. One can see  the valid inputs from  a client to
the collective by looking at the master automate.

3.2.4 Packet type details
-------------------------

In  the following,  each  packet type  presented in  the  above tables  (the
`normal' packet types) are described and explained in greater detail.

In addition, there  are two special packet types which  are explained in the
section after next. This distinction is useful in later definitions.

3.2.4.1 Normal packet types
---------------------------

You will see in the descriptions that packets from a first party to a second
party may result in packets from the second party back to the first and/or a
third party. As an example, take this situation which is also stated below:

If a  slave goes offline, the  corresponding client is notified  (to perhaps
resubmit the job and get another free slave).

 ! - Master/slave stop

External signal to stop the host (master or slave).

If the  master is stopped,  it will stop all  slaves using a  "HALT" packet,
still accepting results from them. While  the slaves are stopped, the master
will generate  "GONE" packets  for all  the clients and  it will  not accept
"PJOB" packets anymore.

If a slave is stopped, it sends a "GONE" packet and submits all .

 # - Wake up

If the host was sleeping, it will now continue working.

 $ - P job user input

A client may now  send a "PJOB" packet to communicate the  user input to the
collective.

 * - Go to sleep

If a host is working or idle, it  goes to sleep now which means that it will
not work anymore,  send result packets or  accept jobs. If a  master goes to
sleep, it sends "SLP " packets to the slaves so that they DON'T SEND RESULTS
ANYMORE. (<--  that's a  difference to  the "SLP "  packet!!!) OTOH,  IF THE
SLAVES CONTINUE  COMPUTING, THE  MASTER WILL  STILL BE  FLOODED WITH  "QRY "
PACKETS AND SO THE SLAVES SHOULD REALLY ALSO GO TO SLEEP.

 + - Result emit timer

The result  emit timer  is an  external signal  which shall  balance network
traffic and  waiting time for results.  Results are buffered locally  by the
slaves  and the  master and  then sent  in  one bulk  to the  master or  the
respective client. The interval defaults to 120 seconds.

 "ACK " - ACK

A non-qualified acknowledgement.

 "AICL" - ACK, client information

Qualified acknowledgement that comes with  the requested information about a
client. The body contains: "FILE=$F" where  $F denotes the contents of the P
job that the client sent.

 "AICO" - ACK, collective information

Qualified     acknowledgement    that     comes    with     the    requested
information     about     the     collective.     The     body     contains:
"FUNCTIONS=$F;DBSIZE=$D;WSLAVES=$W;ISLAVES=$I;"     where     $F    is     a
comma-separated list of  function names in the collective's  database, $D is
the database total size, $W is the number of currently working slaves and $I
is the number of currently idle slaves.

 "AISL" - ACK, slave information

Qualified acknowledgement that comes with  the requested information about a
slave. The body contains: "IP=$I;FUNCTION=$F" where  $I is the IP address in
dotted-decimal  format and  $F is  the function  name that  it is  currently
calculating. <-- How is the slave then identified?

 "ATRU" - ACK, trusted host

Qualified acknowledgement that  the client who submitted a P  job is trusted
and may send its results back to the master.

 "AUTR" - ACK, untrusted host

Qualified  acknowledgement  that  the  client  who  submitted  a  P  job  is
untrusted. The job was accepted but the client is not known and results will
not be accepted from it.

 "ECHK" - NAK, checksum bad with given signature

Qualified error  stating that the packet's  checksum was bad with  the given
signature.  If this  error  is returned,  the packet  was  not yet  analysed
semantically, but only for integrity.

 "ENR " - NAK, no such record or slave

Qualified error stating that there the  is no record for the wanted function
with the given input in the collective's  database and that there is also no
slave  who  is currently  calculating  this  function.  This is  a  possible
response to a slave's  "QRY " packet. A slave who gets  a negative answer to
one of its "QRY  " packets may then send an "IMP "  packet because it cannot
continue computing.

It is also sent  to a client if his slave goes offline.  The client may then
resubmit the job and hope to get another slave.

 "EP  " - NAK, not a valid P job

Qualified  error  stating that  there  was  a parser  error  in  the file  a
preceding "PJOB" packet transmitted. It implies that no job was started.

 "ESIG" - NAK, signature unknown

Qualified error  stating that the  used signature  is not known.  This means
that the ID field contained a non-zero value which is not in the database of
trusted hosts.

 "ESLP" - NAK, host sleeps

Qualified error  in response  to a  "PJOB" packet stating  that the  host is
currently sleeping and will not accept jobs.

 "ESLV" - NAK, no slave left

Qualified error in response to a "PJOB" packet stating that there is no free
slave[*] left to process the job.

[*] Is there something like a `free slave' anyway? :-)

 "ESPC" - NAK, no space left

Qualified error stating  that the master has no space  left at his disposal.
It cannot  possibly continue to maintain  the collective and will  shut down
soon. This  can be a response  to a slave's  or client's "RES "  packet. The
master, after noticing the situation, will start to "HALT" the slaves.

 "EUTR" - NAK, because untrusted

Qualified  error stating  that the  requested operation  is only  granted to
trusted hosts and the host asking to perform it is untrusted.

 "FIN " - Job finished

Packet so  signify that  the P  job a  slave was  working on  finished. This
packet is sent from a slave to  the master and then directed from the master
to the associated client.

 "GONE" - Slave gone

This packet is sent  from a slave whenever it is going  to shut itself down.
It shall have by  then already committed its data to the  master or at least
to its local  database to later submit  them if the slave needs  to get down
immediately. The master can only acknowledge this packet.

 "HALT" - Slave immediate stop

Sent by the master to a slave to make it stop immediately. A reason could be
that the master has no space left  and can't operate further. If this packet
is received, the slave shall not bother sending results but shut itself down
as soon as possible. It is considered appropriate, however, to store pending
results to a local storage to submit them once the master is online again.

---> "PHLT" - Release slave from a P job

 "ICLI" - Send information about client

 

 "ICOL" - Send information about collective

 

 "IMP " - Impossible to fulfill job (from slave)

 

 "ISLV" - Send information about slave

 

 "MOTD" - Message of the day

Sent from a client to the master to request its message of the day. This has
only formal/informational reasons.

 "PJOB" - Job definition in P

Send a  job in the  P language  to the collective.  The client sends  such a
packet to the master which then redirects it  to a slave if there is one. If
there is no slave  left, an "ESLV" shall be returned to  the client. The job
definition and any auxiliary functions shall be in the body of the packet.

If the job is malformed, "EP " is returned.

 "QRY " - Slave result query

Sent by slaves to query function values which are not defined in its own job
definition. The  master will, by some  means[*], locate the result  and then
send a "RES  " packet back to the  slave if the given function  was found in
the database with the wanted input or  if a slave is currently registered to
calculate that function. Otherwise, the error "ENR " is returned.

[*] It can use a local database as commonly stated in this protocol
definition but in fact, it can also  use a depot server or storage slaves if
there is no possibility to attach enough storage to the master itself.

The format of the body is: "$F,$I" where $F depicts the function by its name
and $I is the input tuple. <-- in what format?

 "RES " - Result

 

 "SLAV" - Slave registration

 

 "SLP " - Make slave sleep (to reduce master's network traffic)

This surely comes from the master (is  not equal to the * signal). The slave
may decide  on its  own if  it should really  go to  sleep: the  master will
clearly answer all "QRY "s as "ESLP" from now on but if the slave knows that
he doesn't need  any "QRY "s, he may continue  computing but without sending
results to the master.

 "AMOD" - Message of the day reply

In response to a "MOTD" packet, the server's MOTD shall be delivered in this
packet type.

 "WAKE" - Make slave wake up

 

 "^   " - Job finish

 

You may have  noticed that there are five packets  concerned with signatures
and integrity: "ECHK", "ESIG", "EUTR" and finally "ATRU" und "AUTR".

"ECHK" is sent when  the given ID is known but the checksum  is bad when the
corresponding key is applied. This is an authorisation error. "ESIG" denotes
that the ID is not known to the database. Likely the client connected to the
wrong collective or the person's record in the database was removed. Both of
these errors can only happen if the client actually tries to become trusted.
"EUTR" means

3.2.4.2 Special packet types
----------------------------

There  are  two standard  ways  to  compress  a  packet. These  packets  are
`special' packets because they contain an entirely different packet in their
message body.

 "CZIP" - GZip compressed
 "CLZM" - XZ compressed

[ Type T2   | 4 B ]
[ Length L2 | 4 B ]
[ Body B2   | L B ]
-------------------
          8 + L B

Appendix A - Packet type summary
--------------------------------

Protocol-defined inputs:
 FIN  - Job finished
 GONE - Slave gone
 HALT - Slave immediate stop
 ICLI - Send information about client
 ICOL - Send information about collective
 IMP  - Impossible to fulfill job (from slave)
 ISLV - Send information about slave
 MOTD - Message of the day
 PJOB - Job definition in P
 QRY  - Slave result query
 RES  - Result
 SLAV - Slave registration
 SLP  - Make slave sleep (to reduce master's network traffic)
 WAKE - Make slave wake up

External/implementation-defined inputs:
 !    - Master/slave stop
 #    - Wake up
 $    - P job user input
 *    - Go to sleep
 +    - Result emit timer
 ^    - Job finish

Protocol-defined outputs:
 ACK  - ACK
 AICL - ACK, client information
 AICO - ACK, collective information
 AISL - ACK, slave information
 ATRU - ACK, trusted host
 AUTR - ACK, untrusted host
 ECHK - NAK, checksum bad with given signature
 ENR  - NAK, no such record or slave
 EP   - NAK, not a valid P job
 ESIG - NAK, signature unknown
 ESLP - NAK, slave sleeps
 ESLV - NAK, no slave left
 ESPC - NAK, no space left
 EUTR - NAK, because untrusted
 RES  - Result
 AMOD - Message of the day reply

Special packets:
 CZIP - GZip compressed content
 CLZM - XZ compressed content
